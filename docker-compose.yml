version: "3.8"

services:
  ################################################
  # 0. PostgreSQL (MLflow dataset, Django DB)
  ################################################
  postgres:
    image: postgres:15-alpine
    container_name: mlflow_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=mlflow       # 사용할 DB 이름
      - POSTGRES_USER=mlflow     # DB 사용자
      - POSTGRES_PASSWORD=mlflow # DB 비밀번호
    volumes:
      - ./mlflow_db:/var/lib/postgresql/data
    restart: unless-stopped

  ################################################
  # 1. MLflow Tracking Server
  ################################################
  mlflow:
    build:
      context: ./mlflow_custom_image # 사용자 정의 이미지 디렉토리
      dockerfile: Dockerfile
    container_name: mlflow_tracking_server
    ports:
      - "5001:5000"
    volumes:
      - ./mlartifacts:/mlartifacts
    depends_on:
      - postgres
    entrypoint: >
      mlflow server
      --backend-store-uri postgresql://mlflow:mlflow@postgres:5432/mlflow
      --host 0.0.0.0
      --port 5000
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    restart: unless-stopped

  ################################################
  # 2. FastAPI Model Serving Server
  ################################################
  fastapi_serving:
    build:
      context: ./model_serve
      dockerfile: Dockerfile
    container_name: fastapi_model_server
    ports:
      - "8000:8000"
    depends_on:
      - mlflow
    environment:
      - MLFLOW_TRACKING_URI=http://mlflow:5000
    restart: unless-stopped

  ################################################
  # 3. MinIO Object Storage
  ################################################
  minio:
    image: minio/minio
    container_name: minio
    expose:
      - "9000"
    ports:
      - "9000:9000"
      - "9001:9001"  # MinIO Console is available at http://localhost:9001
    environment:
      MINIO_ROOT_USER: "minio_user"
      MINIO_ROOT_PASSWORD: "minio_password"
    healthcheck:
      test: timeout 5s bash -c ':> /dev/tcp/127.0.0.1/9000' || exit 1
      interval: 1s
      timeout: 10s
      retries: 5
    command: server /data --console-address ":9001"
    restart: unless-stopped

  ################################################
  # 4. MinIO Bucket Creation
  ################################################
  minio-create-bucket:
    image: minio/mc
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      bash -c "
      mc alias set minio http://minio:9000 minio_user minio_password &&
      if ! mc ls minio | grep --quiet bucket; then
        mc mb minio/bucket
      else
        echo 'bucket already exists'
      fi
      "
    restart: "no"

  ################################################
  # 5. Airflow Webserver
  ################################################
  airflow-webserver:
    image: apache/airflow:slim-latest-python3.9
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: webserver

  ################################################
  # 6. Airflow Scheduler
  ################################################
  airflow-scheduler:
    image: apache/airflow:slim-latest-python3.9
    volumes:
      - ./airflow/dags:/opt/airflow/dags
    command: scheduler
